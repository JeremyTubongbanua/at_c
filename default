#!/usr/bin/env python

from os import path
from sys import argv

# Fix path to include idf tools
root_dir = path.dirname(path.realpath(__file__))

commands = ['build', 'clean', 'init', 'project']

def print_usage(exit_code=0):
    print('Usage: tool.py <command> [options]')
    print('Valid commands are: ' + ', '.join(commands))
    print('To see this prompt again: tool.py help')
    exit(exit_code)

def print_project_usage(exit_code=0):
    print('Usage: esp32.py project <path/to/project>')
    exit(exit_code)

def build_command():
  from subprocess import check_call
  # Run cmake
  exit_code = check_call(['cmake', '-S', root_dir, '-B', root_dir+'/build/default'])
  if exit_code != 0:
    print('Unable to build project. Please run "tool.py clean" and try again.')
    return
  # Run make
  exit_code = check_call(['make', '-C', root_dir+'/build/default', 'all'])
  if exit_code != 0:
    print('Unable to build project. Please run "tool.py clean" and try again.')
    return
  # Create lib directory
  from os import makedirs
  makedirs(root_dir+'/lib/default', exist_ok=True)
  # Copy libraries to lib directory
  from glob import glob
  from shutil import copy
  for lib in glob(root_dir+'/build/default/lib*.a'):
    copy(lib, root_dir+'/lib/default/')

def clean_command():
  from shutil import rmtree
  rmtree(root_dir+'/build/default', ignore_errors=True)
  rmtree(root_dir+'/lib/default', ignore_errors=True)
  print('Done cleaning...')

def init_command():
  from sys import executable
  from subprocess import check_call
  exit_code = check_call([executable, '-m', 'pip', 'install', 'cmake==3.25.2'])
  if exit_code != 0:
    print('Unable to automatically install cmake. Please install it manually:')
    print('python -m pip install cmake==3.25.2')

def project_command(project_path):
  from distutils.dir_util import copy_tree
  project_name = path.basename(project_path)
  print('Creating project '+project_name+'...')
  copy_tree(root_dir+'/archetypes/default', project_path)

def main():
  if len(argv) < 2:
    print_usage(1)

  command = argv[1]

  if command == 'build':
    build_command()
  elif command == 'clean':
    clean_command()
  elif command == 'init':
    init_command()
  elif command == 'project':
    if len(argv) < 3:
      print_project_usage(1)
    project_path = argv[2]
    project_command(project_path)
  else:
    print_usage(1)

if __name__ == '__main__':
  main()
